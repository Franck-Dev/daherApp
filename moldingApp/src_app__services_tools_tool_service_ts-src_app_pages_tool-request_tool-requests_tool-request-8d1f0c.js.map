{"version":3,"file":"src_app__services_tools_tool_service_ts-src_app_pages_tool-request_tool-requests_tool-request-8d1f0c.js","mappings":"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","sources":["./src/app/_services/tools/tool.service.ts","./src/app/pages/tool-request/tool-requests/tool-requests-routing.module.ts","./src/app/pages/tool-request/tool-requests/tool-requests.module.ts","./src/app/pages/tool-request/tool-requests/tool-requests.page.ts","./src/app/pages/tool-request/tool-requests/tool-requests.page.html"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Tool } from 'src/app/_interface/tool';\nimport { environment } from 'src/environments/environment';\nimport { RequestService } from '../request.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToolService {\n\n  constructor(\n    private http: HttpClient,\n    private requestService: RequestService\n  ) { }\n\n  getToolByToolNumber(toolNumber: string) {\n    return new Promise((resolve, reject) => {\n      const httpHeaders = new HttpHeaders()\n        .set('content-type', 'application/json');\n      this.http.get(`${environment.apiServer}molding_tools?sapToolNumber=${toolNumber}`, { headers: httpHeaders })\n        .subscribe((returnsData: any) => {\n          console.log(returnsData);\n          if (returnsData.length === 1) {\n            const returnMoldingTool: Tool = returnsData[0];\n            console.log(returnMoldingTool);\n            resolve(returnMoldingTool);\n          } else if (returnsData.length > 1) {\n            console.log('Il y a plus d\\'un outillage');\n          } else {\n            reject();\n          }\n        },\n          (error) => {\n            console.log(error);\n            reject();\n          });\n    });\n  }\n\n  getAllTools() {\n    return new Promise((resolve, reject) => {\n      const httpHeaders = new HttpHeaders()\n        .append('content-type', 'application/json');\n      // .append('Access-Control-Allow-Origins', 'http://localhost:8100/')\n      // .append('Access-Control-Allow-methods', 'GET, OPTIONS, POST, PUT, PATCH, DELETE');\n      this.http.get(`${environment.apiServer}molding_tools`, { headers: httpHeaders })\n        .subscribe((returnsData: any) => {\n          resolve(returnsData);\n        },\n          (error) => {\n            console.log(error);\n            reject();\n          });\n    });\n  }\n  getIri(moldingTool: Tool): string {\n    return `/api/tools/${moldingTool.id}`;\n  }\n\n  createTool(toolToCreate: Tool) {\n    const tool: any = toolToCreate;\n    tool.sapToolNumber = parseInt(toolToCreate.sapToolNumber.substring(2), 10);\n    return this.requestService.createPostRequest(environment.toolApi + 'tools', tool);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ToolRequestsPage } from './tool-requests.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ToolRequestsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ToolRequestsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { IonicModule } from '@ionic/angular';\n\nimport { ToolRequestsPageRoutingModule } from './tool-requests-routing.module';\n\nimport { ToolRequestsPage } from './tool-requests.page';\nimport { SharedUserHeaderModule } from 'src/app/composants/shared-user-header/shared-user-header.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ToolRequestsPageRoutingModule,\n    SharedUserHeaderModule,\n    MatTableModule,\n  ],\n  declarations: [ToolRequestsPage]\n})\nexport class ToolRequestsPageModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ToolRequest } from 'src/app/_interface/tool-request';\nimport { ToolRequestService } from 'src/app/_services/toolRequest/tool-request.service';\n\n@Component({\n  selector: 'app-tool-requests',\n  templateUrl: './tool-requests.page.html',\n  styleUrls: ['./tool-requests.page.scss'],\n})\nexport class ToolRequestsPage implements OnInit {\n  public displayedRequestColumns: ['status', 'title', 'requestDate', 'requestor', 'needDate'];\n  public toolRequests: ToolRequest[];\n\n  constructor(\n    private toolRequestService: ToolRequestService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.toolRequests = [];\n    this.updateRequestList();\n  }\n\n  updateRequestList() {\n    this.toolRequestService.getToolRequests().then((responseRequestList: ToolRequest[]) => {\n      this.toolRequests = responseRequestList;\n    });\n  }\n}\n","export default \"<ion-content [fullscreen]=\\\"true\\\">\\n    <table mat-table #table [dataSource]=\\\"toolRequests\\\">\\n        <ng-container matColumnDef=\\\"status\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"></td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"title\\\">\\n            <th mat-header-cell *matHeaderCellDef>\\n                Titre\\n            </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.title}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"requestDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>\\n                Date demande\\n            </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.requestDate}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"requestor\\\">\\n            <th mat-header-cell *matHeaderCellDef>\\n                Demandeur\\n            </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.requestor}}\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"needDate\\\">\\n            <th mat-header-cell *matHeaderCellDef>\\n                Date Besoin\\n            </th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                {{element.needDate}}\\n            </td>\\n        </ng-container>\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedRequestColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedRequestColumns\\\"></tr>\\n    </table>\\n</ion-content>\";"],"names":[],"sourceRoot":"webpack:///"}