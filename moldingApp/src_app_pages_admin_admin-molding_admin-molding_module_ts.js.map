{"version":3,"file":"src_app_pages_admin_admin-molding_admin-molding_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAGC;AAExD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iEAAgB;KAC5B;IACD;QACE,IAAI,EAAE,oBAAoB;QAC1B,YAAY,EAAE,GAAG,EAAE,CAAC,wUAA4D,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC;KACtH;CACF,CAAC;IAMW,6BAA6B,SAA7B,6BAA6B;CAAI;AAAjC,6BAA6B;IAJzC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,6BAA6B,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;ACrBD;AACM;AACF;AAEA;AAEkC;AAEvB;AACC;IAY5C,sBAAsB,SAAtB,sBAAsB;CAAI;AAA1B,sBAAsB;IAVlC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,wFAA6B;YAC7B,mEAAc;SACf;QACD,YAAY,EAAE,CAAC,iEAAgB,CAAC;KACjC,CAAC;GACW,sBAAsB,CAAI;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;ACrBuD;AAC7B;AAGe;IAO/D,gBAAgB,SAAhB,gBAAgB;IAQ3B,YACU,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAJjC,4BAAuB,GAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;IAOhH,CAAC;IACD,kBAAkB;QAChB,0CAA0C;IAE5C,CAAC;IACD,WAAW;IACX,CAAC;IAED,eAAe;QACb,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,QAAQ;QACN,sBAAsB;QACtB,0CAA0C;QAC1C,yCAAyC;QACzC,wBAAwB;QACxB,wBAAwB;IAE1B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;aAC9B,IAAI,CAAC,CAAC,QAAmB,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAgB,EAAE,EAAE;gBACzC,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,UAAU,GAAG,IAAI,uEAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW,CAAC,KAAY;QACtB,MAAM,WAAW,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAC5D,CAAC;CACF;;YAzDQ,qFAAc;;AAOV,gBAAgB;IAL5B,wDAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,kMAAwC;;KAEzC,CAAC;GACW,gBAAgB,CAkD5B;AAlD4B;;;;;;;;;;;;;;;ACX7B,iEAAe,2kEAA2kE,aAAa,sWAAsW,4CAA4C,8VAA8V,6BAA6B,gWAAgW,kCAAkC,i2BAAi2B,iCAAiC,u+CAAu+C","sources":["./src/app/pages/admin/admin-molding/admin-molding-routing.module.ts","./src/app/pages/admin/admin-molding/admin-molding.module.ts","./src/app/pages/admin/admin-molding/admin-molding.page.ts","./src/app/pages/admin/admin-molding/admin-molding.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MoldingPage } from '../../molding/molding.page';\r\n\r\nimport { AdminMoldingPage } from './admin-molding.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdminMoldingPage\r\n  },\r\n  {\r\n    path: 'create-molding/:id',\r\n    loadChildren: () => import('../../molding/create-molding/create-molding.module').then(m => m.CreateMoldingPageModule)\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminMoldingPageRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { AdminMoldingPageRoutingModule } from './admin-molding-routing.module';\r\n\r\nimport { AdminMoldingPage } from './admin-molding.page';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    AdminMoldingPageRoutingModule,\r\n    MatTableModule,\r\n  ],\r\n  declarations: [AdminMoldingPage]\r\n})\r\nexport class AdminMoldingPageModule { }\r\n","import { AfterViewChecked, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { IonSpinner } from '@ionic/angular';\r\nimport { Molding } from 'src/app/_interface/molding';\r\nimport { MoldingService } from 'src/app/_services/moldings/molding.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-molding',\r\n  templateUrl: './admin-molding.page.html',\r\n  styleUrls: ['./admin-molding.page.scss'],\r\n})\r\nexport class AdminMoldingPage implements OnInit, OnDestroy, AfterViewChecked {\r\n  // public properties\r\n  public moldingListLoading: boolean;\r\n  public moldings: Molding[];\r\n  public dataSource: MatTableDataSource<Molding>;\r\n  public displayedMoldingColumns: string[] = ['status', 'id', 'moldingDay', 'createdBy', 'outillage', 'commands'];\r\n  // private properties\r\n  private refreshData;\r\n  constructor(\r\n    private moldingService: MoldingService\r\n  ) {\r\n\r\n  }\r\n  ngAfterViewChecked(): void {\r\n    // indicators to be reloaded with interval\r\n\r\n  }\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  ionViewDidEnter() {\r\n    this.getMoldings();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.getMoldings();\r\n    // indicators to be reloaded with interval\r\n    // this.refreshData = setInterval(() => {\r\n    //   this.getMoldings();\r\n    // }, this.refreshTime);\r\n\r\n  }\r\n\r\n  getMoldings() {\r\n    this.moldingListLoading = true;\r\n    this.moldingService.getMoldings()\r\n      .then((moldings: Molding[]) => {\r\n        this.moldings = moldings;\r\n        this.moldingListLoading = false;\r\n        this.moldings.forEach((molding: Molding) => {\r\n          molding.status = false;\r\n        });\r\n        this.dataSource = new MatTableDataSource(this.moldings);\r\n      });\r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n}\r\n","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>Administration des moulages</ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content [fullscreen]=\\\"true\\\" color=light>\\r\\n    <ion-grid false>\\r\\n        <ion-row>\\r\\n            <ion-col size=\\\"8\\\">\\r\\n                <ion-card>\\r\\n                    <ion-card-header>\\r\\n                        <ion-toolbar class=ion-no-margin>\\r\\n                            <ion-card-title>Liste des moulages</ion-card-title>\\r\\n                            <ion-button size=small slot=end (click)=\\\"getMoldings()\\\">\\r\\n                                <ion-icon size=small slot=\\\"icon-only\\\" name=\\\"refresh\\\"></ion-icon>\\r\\n                            </ion-button>\\r\\n                            <ion-spinner slot=end *ngIf=\\\"moldingListLoading\\\" name=\\\"circles\\\"></ion-spinner>\\r\\n                        </ion-toolbar>\\r\\n                    </ion-card-header>\\r\\n                    <ion-card-content *ngIf=\\\"moldings\\\">\\r\\n                        <ion-input type=\\\"text\\\" placeholder=\\\"Numéro d'OT\\\" (ionInput)=\\\"applyFilter($event)\\\"></ion-input>\\r\\n\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\" fixedLayout=true>\\r\\n                            <!-- Id Column -->\\r\\n                            <ng-container matColumnDef=\\\"status\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef></th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                                    <ion-icon name=\\\"ellipse\\\" [color]=\\\"(element.status) ? 'danger' : 'success'\\\"></ion-icon>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                            <!-- Id Column -->\\r\\n                            <ng-container matColumnDef=\\\"id\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> ID </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\r\\n                            </ng-container>\\r\\n                            <!-- Moulé le Column -->\\r\\n                            <ng-container matColumnDef=\\\"moldingDay\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> Date du moulage </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.moldingDay | date: \\\"dd/MM/yyyy\\\"}} </td>\\r\\n                            </ng-container>\\r\\n                            <!-- Créé par Column -->\\r\\n                            <ng-container matColumnDef=\\\"createdBy\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> Créé par </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.createdBy.username}} </td>\\r\\n                            </ng-container>\\r\\n                            <!-- Outillage Column -->\\r\\n                            <ng-container matColumnDef=\\\"outillage\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> Outillage </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.outillage.sapToolNumber}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <!-- commands Column -->\\r\\n                            <ng-container matColumnDef=\\\"commands\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n                                    <ion-button size=small expand=\\\"block\\\" fill=\\\"solid\\\" shape=\\\"round\\\" [routerLink]=\\\"'/molding/create-molding/'+element.id\\\">\\r\\n                                        Editer\\r\\n                                    </ion-button>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedMoldingColumns\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedMoldingColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n            </ion-col>\\r\\n            <ion-col size=\\\"4\\\">\\r\\n                <ion-card>\\r\\n                    <ion-card-header>\\r\\n                        <ion-card-title>Tableau de bord</ion-card-title>\\r\\n                    </ion-card-header>\\r\\n                    <ion-card-content>\\r\\n                        <ion-card>\\r\\n                            <ion-card-header>\\r\\n                                <ion-card-subtitle>Nouveaux moulages</ion-card-subtitle>\\r\\n                            </ion-card-header>\\r\\n                            <ion-card-content>\\r\\n                                GRAPHIQUE ICI\\r\\n                                <!-- <canvas #newUsers></canvas> -->\\r\\n                            </ion-card-content>\\r\\n                        </ion-card>\\r\\n\\r\\n                        <ion-card>\\r\\n                            <ion-card-header>\\r\\n                                <ion-card-subtitle>Nombre de connexions par jour</ion-card-subtitle>\\r\\n                            </ion-card-header>\\r\\n                            <ion-card-content>\\r\\n                                GRAPHIQUE ICI\\r\\n                            </ion-card-content>\\r\\n                        </ion-card>\\r\\n                    </ion-card-content>\\r\\n                </ion-card>\\r\\n            </ion-col>\\r\\n        </ion-row>\\r\\n    </ion-grid>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n</ion-content>\";"],"names":[],"sourceRoot":"webpack:///"}